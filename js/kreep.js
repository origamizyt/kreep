(()=>{function w(t){t=t.replaceAll("-","");let e=new Uint8Array(t.length/2);for(let x=0;x<t.length;x+=2)e[x/2]=parseInt(t.slice(x,x+2),16);return e}function I(t){let e=0n,x=1n;for(let r of t)e+=x*BigInt(r),x<<=8n;return e}function l(t,e,x=!1){let r=new Uint8Array(e),a=0;while(t){const s=Number(t%256n);r[a++]=s,t>>=8n}return x?r:r.slice(0,a)}function c(...t){const e=t.map((a)=>a.length).reduce((a,s)=>a+s),x=new Uint8Array(e);let r=0;for(let a of t)x.set(a,r),r+=a.length;return x}function n(t){return new M(t)}class g{root;captionElement;aboutElement;contentElement;constructor(){this.root=document.createElement("div"),this.captionElement=document.createElement("div"),this.aboutElement=document.createElement("div"),this.contentElement=document.createElement("div"),g.configureRoot(this.root),g.configureCaption(this.captionElement),g.configureAbout(this.aboutElement),g.configureContent(this.contentElement),this.root.appendChild(this.captionElement),this.root.appendChild(this.aboutElement),this.root.appendChild(this.contentElement),this.hide(),document.body.appendChild(this.root)}static configureRoot(t){t.style.position="fixed",t.style.top=t.style.left="0",t.style.width="100vw",t.style.height="100vh",t.style.backdropFilter="blur(5px)",t.style.backgroundColor="rgba(0, 0, 0, .3)",t.style.color="white",t.style.display="flex",t.style.flexDirection="column",t.style.gap="10px",t.style.justifyContent="center",t.style.textAlign="center",t.style.zIndex="1000"}static configureCaption(t){t.style.fontFamily="Microsoft YaHei UI, sans-serif",t.style.fontSize="40px",t.style.fontWeight="bold"}static configureAbout(t){t.style.fontFamily="Microsoft YaHei UI, sans-serif",t.style.textTransform="uppercase",t.style.fontSize="14px",t.style.letterSpacing="2px",t.style.marginBottom="20px"}static configureContent(t){t.style.fontFamily="Consolas, monospace",t.style.fontSize="20px"}show(){this.root.style.visibility="visible",this.root.style.pointerEvents="auto"}hide(){this.root.style.visibility="hidden",this.root.style.pointerEvents="none"}unmount(){document.body.removeChild(this.root)}setCaption(t){this.captionElement.textContent=t}setAbout(t){this.aboutElement.textContent=t}setContent(t){this.contentElement.textContent=t}}class A{id;key;url;_userInput;_passwordInput;_submitButton;constructor(t,e,x){this.id=t,this.key=w(e),this.url=x,this._userInput=this._passwordInput=null}userInput(t){return this._userInput=t,this}passwordInput(t){return this._passwordInput=t,this}submitButton(t){return this._submitButton=t,this}async autoFill(){const t=new g;t.setCaption("Kreep"),t.setAbout("by Github/origamizyt"),t.setContent(`Downloading credential from ${this.url}...`),t.show();const e=await fetch(this.url+"/"+this.id,{method:"POST"});t.setContent("Decrypting credential...");const x=await e.text();let r=w(x),a=r.subarray(0,12);r=r.subarray(12);const y=new b(this.key,a).decrypt(r,w(this.id));if(y!==null){t.setContent("Auto-filling forms...");const o=JSON.parse(new TextDecoder().decode(y));if(console.log(o),this._userInput!==null)this._userInput.value=o[0];if(this._passwordInput!==null)this._passwordInput.value=o[1];if(this._submitButton)this._submitButton.click();else{let f=this._passwordInput;while(f&&(f=f.parentElement))if(f.tagName=="form")f.requestSubmit()}}else t.unmount()}}class M{u8;constructor(t){this.u8=t}get high(){return(this.u8&240)>>4}get low(){return this.u8&15}get code(){return this.u8}bit(t){return Boolean(this.u8&1<<t)}add(t){if(t instanceof M)t=t.u8;return n(this.u8^t)}xtimes(){if(this.u8&128)return n((this.u8&127)<<1).add(27);else return n((this.u8&127)<<1)}multiply(t){let e=this,x=n(0);for(let r=0;r<8;++r){if(t.bit(r))x=x.add(e);e=e.xtimes()}return x}power(t){let e=this;for(let x=0;x<t-1;++x)e=e.multiply(this);return e}inverse(){return this.power(254)}}class p{data;constructor(t){this.data=t}static zeroed(t){return new p(Array(t).fill(n(0)))}get length(){return this.data.length}get(t){return this.data[t]}add(t){return new p(this.data.map((e,x)=>e.add(t.get(x))))}shift(t){return new p([...this.data.slice(t),...this.data.slice(0,t)])}dot(t){return this.data.map((e,x)=>e.multiply(t.get(x))).reduce((e,x)=>e.add(x))}copy(){return new p([...this.data])}map(t){return new p(this.data.map(t))}toBytes(){return Uint8Array.from(this.data.map((t)=>t.code))}}class u{rows;constructor(t){this.rows=t}static fromBytes(t){return new u(t.map((e)=>new p(Array.from(e).map(n))))}static splitBytes(t,e){return u.fromBytes(Array(t.length/e).fill(null).map((x,r)=>t.slice(r*4,r*4+4)))}static zeroed(t,e){return new u(Array(t).fill(null).map(()=>p.zeroed(e)))}get length(){return this.rows.length}get(t){return this.rows[t]}append(t){this.rows.push(t)}vectorMultiply(t){return new p(this.rows.map((e)=>t.dot(e)))}map(t){return new u(this.rows.map(t))}toBytes(){return c(...this.rows.map((t)=>t.toBytes()))}}class i{static SBOX=[[99,124,119,123,242,107,111,197,48,1,103,43,254,215,171,118],[202,130,201,125,250,89,71,240,173,212,162,175,156,164,114,192],[183,253,147,38,54,63,247,204,52,165,229,241,113,216,49,21],[4,199,35,195,24,150,5,154,7,18,128,226,235,39,178,117],[9,131,44,26,27,110,90,160,82,59,214,179,41,227,47,132],[83,209,0,237,32,252,177,91,106,203,190,57,74,76,88,207],[208,239,170,251,67,77,51,133,69,249,2,127,80,60,159,168],[81,163,64,143,146,157,56,245,188,182,218,33,16,255,243,210],[205,12,19,236,95,151,68,23,196,167,126,61,100,93,25,115],[96,129,79,220,34,42,144,136,70,238,184,20,222,94,11,219],[224,50,58,10,73,6,36,92,194,211,172,98,145,149,228,121],[231,200,55,109,141,213,78,169,108,86,244,234,101,122,174,8],[186,120,37,46,28,166,180,198,232,221,116,31,75,189,139,138],[112,62,181,102,72,3,246,14,97,53,87,185,134,193,29,158],[225,248,152,17,105,217,142,148,155,30,135,233,206,85,40,223],[140,161,137,13,191,230,66,104,65,153,45,15,176,84,187,22]];static INV_SBOX=[[82,9,106,213,48,54,165,56,191,64,163,158,129,243,215,251],[124,227,57,130,155,47,255,135,52,142,67,68,196,222,233,203],[84,123,148,50,166,194,35,61,238,76,149,11,66,250,195,78],[8,46,161,102,40,217,36,178,118,91,162,73,109,139,209,37],[114,248,246,100,134,104,152,22,212,164,92,204,93,101,182,146],[108,112,72,80,253,237,185,218,94,21,70,87,167,141,157,132],[144,216,171,0,140,188,211,10,247,228,88,5,184,179,69,6],[208,44,30,143,202,63,15,2,193,175,189,3,1,19,138,107],[58,145,17,65,79,103,220,234,151,242,207,206,240,180,230,115],[150,172,116,34,231,173,53,133,226,249,55,232,28,117,223,110],[71,241,26,113,29,41,197,137,111,183,98,14,170,24,190,27],[252,86,62,75,198,210,121,32,154,219,192,254,120,205,90,244],[31,221,168,51,136,7,199,49,177,18,16,89,39,128,236,95],[96,81,127,169,25,181,74,13,45,229,122,159,147,201,156,239],[160,224,59,77,174,42,245,176,200,235,187,60,131,83,153,97],[23,43,4,126,186,119,214,38,225,105,20,99,85,33,12,125]];static MIX_COLUMNS_MATRIX=u.fromBytes([Uint8Array.from([2,3,1,1]),Uint8Array.from([1,2,3,1]),Uint8Array.from([1,1,2,3]),Uint8Array.from([3,1,1,2])]);static INV_MIX_COLUMNS_MATRIX=u.fromBytes([Uint8Array.from([14,11,13,9]),Uint8Array.from([9,14,11,13]),Uint8Array.from([13,9,14,11]),Uint8Array.from([11,13,9,14])]);static RCON=u.fromBytes([Uint8Array.from([0,0,0,0]),Uint8Array.from([1,0,0,0]),Uint8Array.from([2,0,0,0]),Uint8Array.from([4,0,0,0]),Uint8Array.from([8,0,0,0]),Uint8Array.from([16,0,0,0]),Uint8Array.from([32,0,0,0]),Uint8Array.from([64,0,0,0]),Uint8Array.from([128,0,0,0]),Uint8Array.from([27,0,0,0]),Uint8Array.from([54,0,0,0])]);static sbox(t){return n(i.SBOX[t.high][t.low])}static invSbox(t){return n(i.INV_SBOX[t.high][t.low])}static subBytes(t){return t.map((e)=>e.map(i.sbox))}static invSubBytes(t){return t.map((e)=>e.map(i.invSbox))}static shiftRows(t){const e=[[n(0),n(0),n(0),n(0)],[n(0),n(0),n(0),n(0)],[n(0),n(0),n(0),n(0)],[n(0),n(0),n(0),n(0)]];for(let x=0;x<4;++x)for(let r=0;r<4;++r)e[x][r]=t.get((x+r)%4).get(r);return new u(e.map((x)=>new p(x)))}static invShiftRows(t){const e=[[n(0),n(0),n(0),n(0)],[n(0),n(0),n(0),n(0)],[n(0),n(0),n(0),n(0)],[n(0),n(0),n(0),n(0)]];for(let x=0;x<4;++x)for(let r=0;r<4;++r)e[x][r]=t.get((x-r+4)%4).get(r);return new u(e.map((x)=>new p(x)))}static mixColumns(t){return t.map((e)=>i.MIX_COLUMNS_MATRIX.vectorMultiply(e))}static invMixColumns(t){return t.map((e)=>i.INV_MIX_COLUMNS_MATRIX.vectorMultiply(e))}static addRoundKey(t,e,x){return t.map((r,a)=>r.add(e.get(4*x+a)))}static subWord(t){return t.map(i.sbox)}static keyExpansion(t,e){const x=u.splitBytes(t,4),r=t.length/4;for(let a=r;a<4*(e+1);++a){let s=x.get(a-1);if(a%r===0)s=i.subWord(s.shift(1)).add(i.RCON.get(a/r));else if(r>6&&a%r===4)s=i.subWord(s);x.append(x.get(a-r).add(s))}return x}static N_ROUND=14;key;constructor(t){this.key=i.keyExpansion(t,i.N_ROUND)}encrypt(t){let e=u.splitBytes(t,4);e=i.addRoundKey(e,this.key,0);for(let x=1;x<i.N_ROUND;++x)e=i.subBytes(e),e=i.shiftRows(e),e=i.mixColumns(e),e=i.addRoundKey(e,this.key,x);return e=i.subBytes(e),e=i.shiftRows(e),e=i.addRoundKey(e,this.key,i.N_ROUND),e.toBytes()}decrypt(t){let e=u.splitBytes(t,4);e=i.addRoundKey(e,this.key,i.N_ROUND);for(let x=i.N_ROUND-1;x>0;--x)e=i.invShiftRows(e),e=i.invSubBytes(e),e=i.addRoundKey(e,this.key,x),e=i.invMixColumns(e);return e=i.invShiftRows(e),e=i.invSubBytes(e),e=i.addRoundKey(e,this.key,0),e.toBytes()}}class v{key;constructor(t){this.key=t}cipher(t,e){const x=Uint8Array.from(t),r=new Uint8Array(e.length);let a=0;while(e.length>0){const s=new i(this.key).encrypt(x);x.set(l(I(x.subarray(0,4))+1n,4,!0));const y=Math.min(e.length,s.length);for(let o=0;o<y;++o,++a)r[a]=s[o]^e[o];e=e.subarray(y)}return r}}class d{u128;constructor(t){this.u128=t}static fromBytes(t){return new d(I(t))}get code(){return this.u128}bit(t){return Boolean(this.u128&1n<<BigInt(t))}add(t){if(t instanceof d)t=t.u128;return new d(this.u128^t)}xtimes(){if(this.u128&1n<<127n)return new d((this.u128&(1n<<127n)-1n)<<1n).add((1n<<127n)+(1n<<126n)+(1n<<121n)+1n);else return new d((this.u128&(1n<<127n)-1n)<<1n)}multiply(t){let e=this,x=new d(0n);for(let r=0;r<128;++r){if(t.bit(r))x=x.add(e);e=e.xtimes()}return x}dot(t){return this.multiply(t).multiply(new d((1n<<127n)+(1n<<124n)+(1n<<121n)+(1n<<114n)+1n))}toBytes(){return l(this.u128,16,!0)}}class B{key;constructor(t){this.key=d.fromBytes(t)}digest(t){let e=new d(0n);for(let x=0;x<t.length;x+=16){const r=t.subarray(x,x+16);e=d.fromBytes(r).add(e).dot(this.key)}return e.toBytes()}}class b{static rightPad(t){const e=Math.ceil(t.length/16)*16,x=new Uint8Array(e);return x.set(t),x}static deriveKeys(t,e){const x=new i(t),r=new Uint8Array(16),a=new Uint8Array(32);return r.set(x.encrypt(c(l(0n,4,!0),e)).subarray(0,8)),r.set(x.encrypt(c(l(1n,4,!0),e)).subarray(0,8),8),a.set(x.encrypt(c(l(2n,4,!0),e)).slice(0,8)),a.set(x.encrypt(c(l(3n,4,!0),e)).slice(0,8),8),a.set(x.encrypt(c(l(4n,4,!0),e)).slice(0,8),16),a.set(x.encrypt(c(l(5n,4,!0),e)).slice(0,8),24),[r,a]}key;nonce;constructor(t,e){this.key=t,this.nonce=e}encrypt(t,e){const[x,r]=b.deriveKeys(this.key,this.nonce),a=c(l(BigInt(e.length)*8n,8,!0),l(BigInt(t.length)*8n,8,!0)),s=b.rightPad(t),y=b.rightPad(e),o=new B(x).digest(c(y,s,a));for(let m=0;m<this.nonce.length;++m)o[m]^=this.nonce[m];o[15]&=127;const f=new i(r).encrypt(o),U=Uint8Array.from(f);return U[15]|=128,c(new v(r).cipher(U,t),f)}decrypt(t,e){const[x,r]=b.deriveKeys(this.key,this.nonce),a=t.subarray(-16);t=t.subarray(0,-16);const s=Uint8Array.from(a);s[15]|=128;const y=new v(r).cipher(s,t),o=c(l(BigInt(e.length)*8n,8,!0),l(BigInt(y.length)*8n,8,!0)),f=b.rightPad(y),U=b.rightPad(e),m=new B(x).digest(c(U,f,o));for(let h=0;h<this.nonce.length;++h)m[h]^=this.nonce[h];m[15]&=127;const _=new i(r).encrypt(m);let E=0;for(let h=0;h<16;++h)E|=a[h]^_[h];if(E)return null;return y}}((t)=>{t.Kreep=A})(globalThis);})();
